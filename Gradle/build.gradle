// 应用插件
apply plugin: "groovy"
apply plugin: "maven"
apply plugin: 'kotlin'

// 添加依赖
dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation "com.alibaba:fastjson:1.2.44"
    implementation "com.android.tools.build:gradle:3.1.2"
    implementation project(":Tools")
}

// 代码仓库
repositories {
    jcenter()
}
ext.mainDir = new File(projectDir, "src/main")
ext.resourceDir = new File(mainDir, "resources")
ext.javaFileDir = new File(mainDir, "java/com/pqixing/modularization/forOut")
task("copyClass") {
    group = "build"
    doFirst {
        File classDir = new File(resourceDir, "setting")
        if (!classDir.exists()) {
            classDir.mkdirs()
        }
        javaFileDir.listFiles().each { f ->
            def out = new File(classDir, f.name)
            out.parentFile.mkdirs()
            def writer = out.newWriter()
            writer.write("//" + f.text)
            writer.flush()
            writer.close()
        }

        StringBuilder sb = new StringBuilder('''package com.pqixing.modularization
object ProjectInfoFiles {
    val files = listOf(''')
        def dir = new File(resourceDir, "ProjectInfo")
        def prefix = dir.name
        dir.listFiles().each { f1 ->
            if (f1.isDirectory()) {
                def prefix2 = f1.name
                f1.listFiles().each { f2 ->
                    sb.append("\n\"$prefix/$prefix2/$f2.name\",")
                }
            } else sb.append("\n\"$prefix/$f1.name\",")

        }
        sb.deleteCharAt(sb.length() - 1).append(" ) }")
        def writer = new File(javaFileDir.parentFile, "ProjectInfoFiles.kt").newWriter()
        writer.write(sb.toString())
        writer.flush()
        writer.close()
    }
}

uploadArchives.dependsOn "clean"
uploadArchives.dependsOn "auto"